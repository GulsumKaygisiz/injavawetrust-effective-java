package chapter04.item25;

public class Item25Notes {

	// ####
	// Item 25: Limit source files to a single top-level class

	// While the Java compiler lets you define multiple top-level classes in a
	// single source file, there are no benefits associated with doing so, and there
	// are significant risks.

	// The risks stem from the fact that defining multiple top-level classes in a
	// source file makes it possible to provide multiple definitions for a class.

	// Fixing the problem is as simple as splitting the top-level classes (Utensil
	// and Dessert, in the case of our example) into separate source files.

	// If you are tempted to put multiple top-level classes into a single source
	// file, consider using static member classes (Item 24) as an alternative to
	// splitting the classes into separate source files.

	// If the classes are subservient to another class, making them into static
	// member classes is generally the better alternative because it enhances
	// readability and makes it possible to reduce the accessibility of the classes
	// by declaring them private (Item 15).

	// The lesson is clear: Never put multiple top-level classes or interfaces in a
	// single source file. Following this rule guarantees that you canâ€™t have
	// multiple definitions for a single class at compile time. This in turn
	// guarantees that the class files generated by compilation, and the behavior of
	// the resulting program, are independent of the order in which the source files
	// are passed to the compiler.
}
