package chapter05.item28;

public class Item28Notes {

	// #####
	// Item 28 : Prefer lists to arrays
	//
	// Arrays differ from generic types in two important ways.
	// Arrays are covariant. This means simply that if Sub is a subtype of Super ,
	// then the array type Sub[] is a subtype of the array type Super[]

	// Generics ,by contrast , are invariant.
	// For any two distinct types Type1 and Type2 List<Type1> is netiher a subtype
	// nor a supertype of List<Tyoe2>
	//

	// The second major difference between arrays and generics is that arrays are
	// reified.
	// This means that arrays know and enforce their element type at runtime.
	//
	// If you try to put a String into an array of Long, you will get an
	// ArrayStoreException

	// It is illegal to create an array of a generic type, a parameterized type or a
	// type parameter.

	// Therefore , none of these array creation expressions are legal :
	// new List<E>[] , new List<String>[] , new E[]

	// All will result in generic array creation errors at compile time.

	// why is it illegal to create a generic array ? because it isnt typesafe.
	// if it were legal , casts generated by the compiler in an otherwise correct
	// program could fail at runtime with a ClassCastException
	// This would violate the fundamental guarantee provided by the generic type
	// system.

	// Types such as E , List <E> , List<String> are technically known as
	// nonreifiable types

	// non-reifiable type is one whose runtime reprsentation contains less
	// information than its compile-time representation.
	// Because of erasure , the only parameterized types that are reifiable are
	// unbounded wildcard types such as List<?> , Map<?,?>
	
	// In summary, arrays and generics have very different type rules.
	// Arrays are covariant and reified 
	// Generic are invariant and erased
	
	// As a consequence, arrays provide runtime type safety but not compile-time type safety , and vice versa for generics.
	// As a rule , arrays and generics dont mix well.
	//
	// if you find yourself mixing them and getting compile-time errors on warnings your first impulse should be to replace the arrays with lists.

}
